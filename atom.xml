<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>molittle</title>
  
  <subtitle>molittle</subtitle>
  <link href="http://molittle-git.github.io/atom.xml" rel="self"/>
  
  <link href="http://molittle-git.github.io/"/>
  <updated>2025-04-24T13:59:54.031Z</updated>
  <id>http://molittle-git.github.io/</id>
  
  <author>
    <name>molittle</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://molittle-git.github.io/posts/4a17b156.html"/>
    <id>http://molittle-git.github.io/posts/4a17b156.html</id>
    <published>2025-04-24T04:00:58.445Z</published>
    <updated>2025-04-24T13:59:54.031Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数学</title>
    <link href="http://molittle-git.github.io/posts/fe7e69f4.html"/>
    <id>http://molittle-git.github.io/posts/fe7e69f4.html</id>
    <published>2024-09-25T14:27:24.000Z</published>
    <updated>2025-04-24T13:59:49.633Z</updated>
    
    <content type="html"><![CDATA[<p>筛质数</p><ul><li>埃式筛</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//埃式</span><br><span class="line">const int N=10001;</span><br><span class="line">int primes[N],cnt=0;</span><br><span class="line">bool st[N];</span><br><span class="line">void get_p(int n)&#123;</span><br><span class="line">    for(int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">        if(!st[i])primes[cnt++]=i;</span><br><span class="line">        for(int j=i+i;j&lt;=n;j+=i)&#123;</span><br><span class="line">                st[j]=true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>线性筛</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const int N=10001;</span><br><span class="line">int primes[N],cnt=0;</span><br><span class="line">bool st[N];</span><br><span class="line">void get_prime(int n) &#123;</span><br><span class="line">    for(int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">        if(!st[i])primes[cnt++]=i;</span><br><span class="line">        for(int j=0;primes[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=true;</span><br><span class="line">            if(i%primes[j]==0)break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>费马逆元</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    static long MOD = (long)1e9 + 7;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        int q = sc.nextInt();</span><br><span class="line">        int maxN = 0;</span><br><span class="line">        int[] nList = new int[q];</span><br><span class="line">        int[] mList = new int[q];</span><br><span class="line"></span><br><span class="line">        // 读取所有查询并找到最大的 n</span><br><span class="line">        for (int i = 0; i &lt; q; i++) &#123;</span><br><span class="line">            int n = sc.nextInt();</span><br><span class="line">            int m = sc.nextInt();</span><br><span class="line">            nList[i] = n;</span><br><span class="line">            mList[i] = m;</span><br><span class="line">            if (n &gt; maxN) &#123;</span><br><span class="line">                maxN = n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 预处理阶乘和逆元</span><br><span class="line">        long[] factorial = new long[maxN + 1];</span><br><span class="line">        long[] inverse = new long[maxN + 1];</span><br><span class="line">        factorial[0] = 1;</span><br><span class="line">        for (int i = 1; i &lt;= maxN; i++) &#123;</span><br><span class="line">            factorial[i] = (factorial[i - 1] * i) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 使用费马小定理计算逆元</span><br><span class="line">        inverse[maxN] = fastPower(factorial[maxN], MOD - 2, MOD);</span><br><span class="line">        for (int i = maxN - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">            inverse[i] = (inverse[i + 1] * (i + 1)) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 处理每个查询</span><br><span class="line">        for (int i = 0; i &lt; q; i++) &#123;</span><br><span class="line">            int n = nList[i];</span><br><span class="line">            int m = mList[i];</span><br><span class="line">            if (m &lt; 0  m &gt; n) &#123;</span><br><span class="line">                System.out.println(0);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            long ans = (factorial[n] * inverse[m] % MOD) * inverse[n - m] % MOD;</span><br><span class="line">            System.out.println(ans);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 快速幂算法</span><br><span class="line">    public static long fastPower(long base, long exponent, long mod) &#123;</span><br><span class="line">        long result = 1;</span><br><span class="line">        base %= mod;</span><br><span class="line">        while (exponent &gt; 0) &#123;</span><br><span class="line">            if ((exponent &amp; 1) == 1) &#123;</span><br><span class="line">                result = (result * base) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            base = (base * base) % mod;</span><br><span class="line">            exponent &gt;&gt;= 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快速幂</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Solution solution = new Solution();</span><br><span class="line"></span><br><span class="line">        // 测试用例 1: 正指数</span><br><span class="line">        double result1 = solution.myPow(2.0, 10);</span><br><span class="line">        System.out.println(&quot;2^10 = &quot; + result1); // 输出: 1024.0</span><br><span class="line"></span><br><span class="line">        // 测试用例 2: 负指数</span><br><span class="line">        double result2 = solution.myPow(2.0, -2);</span><br><span class="line">        System.out.println(&quot;2^-2 = &quot; + result2); // 输出: 0.25</span><br><span class="line"></span><br><span class="line">        // 测试用例 3: 零指数</span><br><span class="line">        double result3 = solution.myPow(5.0, 0);</span><br><span class="line">        System.out.println(&quot;5^0 = &quot; + result3); // 输出: 1.0</span><br><span class="line"></span><br><span class="line">        // 测试用例 4: 边界条件 (0^0)</span><br><span class="line">        double result4 = solution.myPow(0.0, 0);</span><br><span class="line">        System.out.println(&quot;0^0 = &quot; + result4); // 输出: 1.0</span><br><span class="line"></span><br><span class="line">        // 测试用例 5: 整数溢出测试 (Integer.MIN_VALUE)</span><br><span class="line">        double result5 = solution.myPow(2.0, Integer.MIN_VALUE);</span><br><span class="line">        System.out.println(&quot;2^&quot; + Integer.MIN_VALUE + &quot; = &quot; + result5); // 输出一个非常小的数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">    public double myPow(double x, int n) &#123;</span><br><span class="line">        long N = n; // 将指数转换为 long 类型以避免溢出</span><br><span class="line">        if (N &lt; 0) &#123;</span><br><span class="line">            x = 1 / x; // 处理负指数</span><br><span class="line">            N = -N;    // 将指数转为正数</span><br><span class="line">        &#125;</span><br><span class="line">        return powIterative(x, N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 迭代实现快速幂</span><br><span class="line">    private double powIterative(double x, long n) &#123;</span><br><span class="line">        double result = 1.0; // 初始化结果</span><br><span class="line">        while (n &gt; 0) &#123;</span><br><span class="line">            if (n % 2 == 1) &#123; // 如果指数是奇数</span><br><span class="line">                result *= x;  // 将当前的 x 乘到结果中</span><br><span class="line">            &#125;</span><br><span class="line">            x *= x; // 平方 x</span><br><span class="line">            n /= 2; // 将指数减半</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>欧几里得和欧拉  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main&#123;</span><br><span class="line">    static int mod=9901; // 定义模数，用于结果取模</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner scan=new Scanner(System.in);</span><br><span class="line">        int A=scan.nextInt(),B=scan.nextInt(); // 输入A和B</span><br><span class="line">        int res=1; // 初始化结果为1，用于累积各质因数等比和的乘积</span><br><span class="line">        </span><br><span class="line">        // 质因数分解A，从2开始试除</span><br><span class="line">        for(int i=2;i*i&lt;=A;i++)&#123;</span><br><span class="line">            if(A%i==0)&#123;</span><br><span class="line">                int s=0; // 记录当前质因数i的指数</span><br><span class="line">                while(A%i==0)&#123;</span><br><span class="line">                    A/=i; // 除去所有i因子</span><br><span class="line">                    s++;</span><br><span class="line">                &#125;</span><br><span class="line">                // 计算i^(s*B)的等比和，并累积到结果中</span><br><span class="line">                res=res*sum(i,s*B+1)%mod; // s*B+1项（0次方到s*B次方）</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 处理剩余的质因数（当A是质数时）</span><br><span class="line">        if(A&gt;1)res=res*sum(A,B+1)%mod; // 指数为1*B，项数为B+1</span><br><span class="line">        if(A==0)res=0; // 特判A=0的情况，结果直接为0</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 快速幂算法：计算a^k % mod</span><br><span class="line">    public static int quic(int a,int k)&#123;</span><br><span class="line">        int res=1;</span><br><span class="line">        a%=mod; // 先取模，防止溢出</span><br><span class="line">        while(k&gt;0)&#123;</span><br><span class="line">            if((k&amp;1)==1)&#123; // 如果当前二进制位为1，乘入结果</span><br><span class="line">                res=(res*a)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">            a=(a*a)%mod; // a自乘，相当于计算下一位的权值</span><br><span class="line">            k&gt;&gt;=1; // 右移一位，处理下一位二进制</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 分治法计算等比数列和：1 + p + p^2 + ... + p^(k-1)</span><br><span class="line">    public static int sum(int p,int k)&#123;</span><br><span class="line">        if(k==1)return 1; // 边界条件，只有1项</span><br><span class="line">        if(k%2==0)&#123; // 当k为偶数时，拆分成两部分</span><br><span class="line">            // sum(p,k) = (1 + p^(k/2)) * sum(p, k/2)</span><br><span class="line">            return ((1+quic(p,k/2))*sum(p,k/2))%mod;</span><br><span class="line">        &#125; else &#123; // 当k为奇数时，拆分为前k-1项和最后一项</span><br><span class="line">            // sum(p,k) = sum(p,k-1) + p^(k-1)</span><br><span class="line">            return (sum(p,k-1)+quic(p,k-1))%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;筛质数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;埃式筛&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp</summary>
      
    
    
    
    <category term="program" scheme="http://molittle-git.github.io/categories/program/"/>
    
    <category term="算法模板" scheme="http://molittle-git.github.io/categories/program/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="数学" scheme="http://molittle-git.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
</feed>
