<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数学</title>
      <link href="/posts/fe7e69f4.html"/>
      <url>/posts/fe7e69f4.html</url>
      
        <content type="html"><![CDATA[<p>筛质数</p><ul><li>埃式筛</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//埃式</span><br><span class="line">const int N=10001;</span><br><span class="line">int primes[N],cnt=0;</span><br><span class="line">bool st[N];</span><br><span class="line">void get_p(int n)&#123;</span><br><span class="line">    for(int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">        if(!st[i])primes[cnt++]=i;</span><br><span class="line">        for(int j=i+i;j&lt;=n;j+=i)&#123;</span><br><span class="line">                st[j]=true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>线性筛</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const int N=10001;</span><br><span class="line">int primes[N],cnt=0;</span><br><span class="line">bool st[N];</span><br><span class="line">void get_prime(int n) &#123;</span><br><span class="line">    for(int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">        if(!st[i])primes[cnt++]=i;</span><br><span class="line">        for(int j=0;primes[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=true;</span><br><span class="line">            if(i%primes[j]==0)break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>费马逆元</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    static long MOD = (long)1e9 + 7;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        int q = sc.nextInt();</span><br><span class="line">        int maxN = 0;</span><br><span class="line">        int[] nList = new int[q];</span><br><span class="line">        int[] mList = new int[q];</span><br><span class="line"></span><br><span class="line">        // 读取所有查询并找到最大的 n</span><br><span class="line">        for (int i = 0; i &lt; q; i++) &#123;</span><br><span class="line">            int n = sc.nextInt();</span><br><span class="line">            int m = sc.nextInt();</span><br><span class="line">            nList[i] = n;</span><br><span class="line">            mList[i] = m;</span><br><span class="line">            if (n &gt; maxN) &#123;</span><br><span class="line">                maxN = n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 预处理阶乘和逆元</span><br><span class="line">        long[] factorial = new long[maxN + 1];</span><br><span class="line">        long[] inverse = new long[maxN + 1];</span><br><span class="line">        factorial[0] = 1;</span><br><span class="line">        for (int i = 1; i &lt;= maxN; i++) &#123;</span><br><span class="line">            factorial[i] = (factorial[i - 1] * i) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 使用费马小定理计算逆元</span><br><span class="line">        inverse[maxN] = fastPower(factorial[maxN], MOD - 2, MOD);</span><br><span class="line">        for (int i = maxN - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">            inverse[i] = (inverse[i + 1] * (i + 1)) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 处理每个查询</span><br><span class="line">        for (int i = 0; i &lt; q; i++) &#123;</span><br><span class="line">            int n = nList[i];</span><br><span class="line">            int m = mList[i];</span><br><span class="line">            if (m &lt; 0  m &gt; n) &#123;</span><br><span class="line">                System.out.println(0);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            long ans = (factorial[n] * inverse[m] % MOD) * inverse[n - m] % MOD;</span><br><span class="line">            System.out.println(ans);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 快速幂算法</span><br><span class="line">    public static long fastPower(long base, long exponent, long mod) &#123;</span><br><span class="line">        long result = 1;</span><br><span class="line">        base %= mod;</span><br><span class="line">        while (exponent &gt; 0) &#123;</span><br><span class="line">            if ((exponent &amp; 1) == 1) &#123;</span><br><span class="line">                result = (result * base) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            base = (base * base) % mod;</span><br><span class="line">            exponent &gt;&gt;= 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快速幂</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Solution solution = new Solution();</span><br><span class="line"></span><br><span class="line">        // 测试用例 1: 正指数</span><br><span class="line">        double result1 = solution.myPow(2.0, 10);</span><br><span class="line">        System.out.println(&quot;2^10 = &quot; + result1); // 输出: 1024.0</span><br><span class="line"></span><br><span class="line">        // 测试用例 2: 负指数</span><br><span class="line">        double result2 = solution.myPow(2.0, -2);</span><br><span class="line">        System.out.println(&quot;2^-2 = &quot; + result2); // 输出: 0.25</span><br><span class="line"></span><br><span class="line">        // 测试用例 3: 零指数</span><br><span class="line">        double result3 = solution.myPow(5.0, 0);</span><br><span class="line">        System.out.println(&quot;5^0 = &quot; + result3); // 输出: 1.0</span><br><span class="line"></span><br><span class="line">        // 测试用例 4: 边界条件 (0^0)</span><br><span class="line">        double result4 = solution.myPow(0.0, 0);</span><br><span class="line">        System.out.println(&quot;0^0 = &quot; + result4); // 输出: 1.0</span><br><span class="line"></span><br><span class="line">        // 测试用例 5: 整数溢出测试 (Integer.MIN_VALUE)</span><br><span class="line">        double result5 = solution.myPow(2.0, Integer.MIN_VALUE);</span><br><span class="line">        System.out.println(&quot;2^&quot; + Integer.MIN_VALUE + &quot; = &quot; + result5); // 输出一个非常小的数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">    public double myPow(double x, int n) &#123;</span><br><span class="line">        long N = n; // 将指数转换为 long 类型以避免溢出</span><br><span class="line">        if (N &lt; 0) &#123;</span><br><span class="line">            x = 1 / x; // 处理负指数</span><br><span class="line">            N = -N;    // 将指数转为正数</span><br><span class="line">        &#125;</span><br><span class="line">        return powIterative(x, N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 迭代实现快速幂</span><br><span class="line">    private double powIterative(double x, long n) &#123;</span><br><span class="line">        double result = 1.0; // 初始化结果</span><br><span class="line">        while (n &gt; 0) &#123;</span><br><span class="line">            if (n % 2 == 1) &#123; // 如果指数是奇数</span><br><span class="line">                result *= x;  // 将当前的 x 乘到结果中</span><br><span class="line">            &#125;</span><br><span class="line">            x *= x; // 平方 x</span><br><span class="line">            n /= 2; // 将指数减半</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>欧几里得和欧拉  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main&#123;</span><br><span class="line">    static int mod=9901; // 定义模数，用于结果取模</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner scan=new Scanner(System.in);</span><br><span class="line">        int A=scan.nextInt(),B=scan.nextInt(); // 输入A和B</span><br><span class="line">        int res=1; // 初始化结果为1，用于累积各质因数等比和的乘积</span><br><span class="line">        </span><br><span class="line">        // 质因数分解A，从2开始试除</span><br><span class="line">        for(int i=2;i*i&lt;=A;i++)&#123;</span><br><span class="line">            if(A%i==0)&#123;</span><br><span class="line">                int s=0; // 记录当前质因数i的指数</span><br><span class="line">                while(A%i==0)&#123;</span><br><span class="line">                    A/=i; // 除去所有i因子</span><br><span class="line">                    s++;</span><br><span class="line">                &#125;</span><br><span class="line">                // 计算i^(s*B)的等比和，并累积到结果中</span><br><span class="line">                res=res*sum(i,s*B+1)%mod; // s*B+1项（0次方到s*B次方）</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 处理剩余的质因数（当A是质数时）</span><br><span class="line">        if(A&gt;1)res=res*sum(A,B+1)%mod; // 指数为1*B，项数为B+1</span><br><span class="line">        if(A==0)res=0; // 特判A=0的情况，结果直接为0</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 快速幂算法：计算a^k % mod</span><br><span class="line">    public static int quic(int a,int k)&#123;</span><br><span class="line">        int res=1;</span><br><span class="line">        a%=mod; // 先取模，防止溢出</span><br><span class="line">        while(k&gt;0)&#123;</span><br><span class="line">            if((k&amp;1)==1)&#123; // 如果当前二进制位为1，乘入结果</span><br><span class="line">                res=(res*a)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">            a=(a*a)%mod; // a自乘，相当于计算下一位的权值</span><br><span class="line">            k&gt;&gt;=1; // 右移一位，处理下一位二进制</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 分治法计算等比数列和：1 + p + p^2 + ... + p^(k-1)</span><br><span class="line">    public static int sum(int p,int k)&#123;</span><br><span class="line">        if(k==1)return 1; // 边界条件，只有1项</span><br><span class="line">        if(k%2==0)&#123; // 当k为偶数时，拆分成两部分</span><br><span class="line">            // sum(p,k) = (1 + p^(k/2)) * sum(p, k/2)</span><br><span class="line">            return ((1+quic(p,k/2))*sum(p,k/2))%mod;</span><br><span class="line">        &#125; else &#123; // 当k为奇数时，拆分为前k-1项和最后一项</span><br><span class="line">            // sum(p,k) = sum(p,k-1) + p^(k-1)</span><br><span class="line">            return (sum(p,k-1)+quic(p,k-1))%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"molittle","short_name":"molittle","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtim.js"/>
      <url>/js/runtime/runtim.js</url>
      
        <content type="html"><![CDATA[var now = new Date;function createtime() {    var t = new Date("04/24/2025 00:00:00");    now.setTime(now.getTime() + 250);    var e = (now - t) / 1e3 / 60 / 60 / 24, a = Math.floor(e), n = (now - t) / 1e3 / 60 / 60 - 24 * a, r = Math.floor(n); 1 == String(r).length && (r = "0" + r); var s = (now - t) / 1e3 / 60 - 1440 * a - 60 * r, i = Math.floor(s);    1 == String(i).length && (i = "0" + i);    var o = (now - t) / 1e3 - 86400 * a - 3600 * r - 60 * i, l = Math.round(o); 1 == String(l).length && (l = "0" + l); let g = ""; g = r < 18 && r >= 9 ? `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安知鱼-上班摸鱼中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>` : `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安知鱼-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = g)} setInterval((() => { createtime() }), 250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime/runtime.css"/>
      <url>/css/runtime/runtime.css</url>
      
        <content type="html"><![CDATA[div#runtime {    width: 180px;    margin: auto;    color: #fff;    padding-inline: 5px;    border-radius: 10px;    background-color: rgba(0, 0, 0, .7)}#workboard {    font-size: 12px}[data-theme=dark] div#runtime {    color: #28b4c8;    box-shadow: 0 0 5px rgba(28, 69, 218, .71);    animation: flashlight 1s linear infinite alternate}#ghbdages .github-badge img {    height: 20px}@-moz-keyframes flashlight {    from {        box-shadow: 0 0 5px #1478d2    }    to {        box-shadow: 0 0 2px #1478d2    }}@-webkit-keyframes flashlight {    from {        box-shadow: 0 0 5px #1478d2    }    to {        box-shadow: 0 0 2px #1478d2    }}@-o-keyframes flashlight {    from {        box-shadow: 0 0 5px #1478d2    }    to {        box-shadow: 0 0 2px #1478d2    }}@keyframes flashlight {    from {        box-shadow: 0 0 5px #1478d2    }    to {        box-shadow: 0 0 2px #1478d2    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[window._iconfont_svg_string_4902343='<svg><symbol id="icon-customerservice-fill1" viewBox="0 0 1024 1024"><path d="M512 128c-212.1 0-384 171.9-384 384v360c0 13.3 10.7 24 24 24h184c35.3 0 64-28.7 64-64V624c0-35.3-28.7-64-64-64H200v-48c0-172.3 139.7-312 312-312s312 139.7 312 312v48H688c-35.3 0-64 28.7-64 64v208c0 35.3 28.7 64 64 64h184c13.3 0 24-10.7 24-24V512c0-212.1-171.9-384-384-384z" fill="#1296DB" ></path></symbol><symbol id="icon-home1" viewBox="0 0 1024 1024"><path d="M947 484.1L530.7 75.9c-12.6-12.4-32.8-12.3-45.3 0.2L73.5 488c-13.4 13.4-13.2 35.1 0.3 48.3l23.9 23.3c13.3 13 34.5 12.9 47.7-0.2l343-341.4c10.8-10.7 28.2-10.7 39 0l343.2 341.6c13.1 13 34.1 13.2 47.4 0.5l28.6-27.3c14-13.1 14.1-35.2 0.4-48.7zM814.3 101.6c0-13.5-10.9-24.4-24.4-24.4H701c-13.5 0-24.4 10.9-24.4 24.4v49.9l137.8 137.8V101.6z" fill="#00AEEF" ></path><path d="M492.4 280.4l-343.5 339v305.1c0 19.7 16 35.7 35.7 35.7h167.9c19.7 0 35.7-16 35.7-35.7V678.1c0-10.4 8.5-18.9 18.9-18.9h203.3c10.4 0 18.9 8.5 18.9 18.9v246.3c0 19.7 16 35.7 35.7 35.7h166c19.7 0 35.7-16 35.7-35.7V619.3l-338.1-339c-9.8-10-26.1-10-36.2 0.1z" fill="#00AEEF" ></path></symbol><symbol id="icon-QQ" viewBox="0 0 1024 1024"><path d="M512 0C229.003636 0 0 229.003636 0 512s229.003636 512 512 512 512-229.003636 512-512S794.996364 0 512 0z m210.385455 641.396364c-7.447273 9.309091-26.996364-1.861818-41.89091-32.581819-3.723636 13.963636-13.032727 36.305455-34.443636 64.232728 35.374545 8.378182 44.683636 42.821818 33.512727 61.44-8.378182 13.032727-26.996364 24.203636-59.578181 24.203636-58.647273 0-83.781818-15.825455-95.883637-26.996364-1.861818-2.792727-5.585455-3.723636-10.24-3.723636-4.654545 0-7.447273 0.930909-10.24 3.723636-11.170909 11.170909-37.236364 26.996364-95.883636 26.996364-32.581818 0-52.130909-11.170909-59.578182-24.203636-12.101818-18.618182-1.861818-53.061818 33.512727-61.44-20.48-27.927273-29.789091-50.269091-34.443636-64.232728-13.963636 30.72-34.443636 42.821818-41.890909 32.581819-5.585455-8.378182-8.378182-26.065455-7.447273-38.167273 3.723636-46.545455 34.443636-85.643636 53.061818-106.123636-2.792727-5.585455-8.378182-40.029091 14.894546-63.301819v-1.861818c0-92.16 65.163636-158.254545 148.014545-158.254545 81.92 0 148.014545 66.094545 148.014546 158.254545v1.861818c23.272727 23.272727 17.687273 57.716364 14.894545 63.301819 17.687273 20.48 49.338182 59.578182 53.061818 106.123636 0.930909 12.101818-0.930909 29.789091-7.447272 38.167273z" fill="#30A5DD" ></path></symbol><symbol id="icon-icon--" viewBox="0 0 1024 1024"><path d="M832 194.56h-614.4c-56.32 0-102.4 46.08-102.4 102.4v409.6c0 56.32 46.08 102.4 102.4 102.4h614.4c56.32 0 102.4-46.08 102.4-102.4v-409.6c0-56.32-46.08-102.4-102.4-102.4z m25.6 51.2l-332.8 256-332.8-256h665.6z m-691.2 460.8v-409.6l230.4 179.2-227.84 245.76c-2.56-5.12-2.56-10.24-2.56-15.36z m40.96 48.64l230.4-245.76 87.04 66.56 84.48-66.56 235.52 245.76H207.36z m675.84-48.64c0 5.12 0 10.24-2.56 15.36l-227.84-245.76 230.4-179.2v409.6z" fill="#00AAC1" ></path></symbol><symbol id="icon-shijianzhoujiedian" viewBox="0 0 1024 1024"><path d="M512 51.2c256 0 460.8 204.8 460.8 460.8s-204.8 460.8-460.8 460.8-460.8-204.8-460.8-460.8 204.8-460.8 460.8-460.8z" fill="#FFFFFF" ></path><path d="M512 153.6c199.68 0 358.4 158.72 358.4 358.4s-158.72 358.4-358.4 358.4-358.4-158.72-358.4-358.4 158.72-358.4 358.4-358.4z" fill="#10C2F8" ></path><path d="M716.8 563.2h-204.8c-30.72 0-51.2-20.48-51.2-51.2V358.4c0-30.72 20.48-51.2 51.2-51.2s51.2 20.48 51.2 51.2v102.4h153.6c30.72 0 51.2 20.48 51.2 51.2s-20.48 51.2-51.2 51.2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1024 1024"><path d="M291.55 206h441.552c58.286 0 105.549 53.196 105.549 118.797v323.639c0 65.6-47.263 118.796-105.549 118.796H512.325l-172.01 107.352c-5.623 3.51-13.025 1.796-16.534-3.826a12 12 0 0 1-0.697-11.422L366 767.232h-74.45c-58.287 0-105.55-53.196-105.55-118.796v-323.64C186 259.145 233.263 206 291.55 206zM321 536c24.853 0 45-20.147 45-45s-20.147-45-45-45-45 20.147-45 45 20.147 45 45 45z m180 0c24.853 0 45-20.147 45-45s-20.147-45-45-45-45 20.147-45 45 20.147 45 45 45z m180 0c24.853 0 45-20.147 45-45s-20.147-45-45-45-45 20.147-45 45 20.147 45 45 45z" fill="#1AA5FF" ></path></symbol><symbol id="icon-icon-lianjie" viewBox="0 0 1024 1024"><path d="M447.8976 787.6608l-73.728 73.728a145.408 145.408 0 0 1-105.7792 44.8512 150.8352 150.8352 0 0 1-105.7792-256.4096L338.944 473.4976a145.408 145.408 0 0 1 105.7792-44.8512c38.4 0 76.8 16.0768 105.7792 44.8512 22.4256 22.528 60.8256 22.528 86.528 0 22.4256-22.4256 22.4256-60.8256 0-86.528a268.9024 268.9024 0 0 0-381.44 0L79.36 563.3024a268.9024 268.9024 0 0 0 0 381.3376 268.9024 268.9024 0 0 0 381.3376 0l73.728-73.728c22.528-22.4256 22.528-60.8256 0-86.528-25.6-19.1488-64.1024-19.1488-86.528 3.2768zM944.64 79.36a268.9024 268.9024 0 0 0-381.3376 0l-73.728 73.728c-22.528 22.4256-22.528 60.8256 0 86.528 22.4256 22.4256 60.928 22.4256 86.528 0l73.728-73.728a145.408 145.408 0 0 1 105.7792-44.9536 150.8352 150.8352 0 0 1 105.7792 256.4096L685.056 553.6768a145.408 145.408 0 0 1-105.7792 44.8512c-38.4 0-76.8-15.9744-105.7792-44.8512-22.4256-22.528-60.8256-22.528-86.528 0a59.2896 59.2896 0 0 0-3.1744 80.0768l3.1744 3.2768a268.9024 268.9024 0 0 0 381.44 0l176.2304-176.3328c105.7792-105.7792 105.7792-278.8352 0-381.3376z" fill="#0052CC" ></path></symbol><symbol id="icon-RSS" viewBox="0 0 1024 1024"><path d="M245.323116 913.111046a110.883142 110.883142 0 1 1-110.883141-110.883142A110.883142 110.883142 0 0 1 245.323116 913.111046zM155.901228 1.007785A118.484002 118.484002 0 0 0 61.114026 30.517008 115.801345 115.801345 0 0 0 21.768395 117.25624a117.589783 117.589783 0 0 0 104.1765 114.907126c327.731221 41.581178 603.597746 337.567629 641.15494 688.548541a114.460017 114.460017 0 0 0 114.907126 102.835171 118.036893 118.036893 0 0 0 89.421889-38.898521 113.118689 113.118689 0 0 0 28.615004-89.421889C949.520487 440.963475 586.46762 56.449355 155.901228 1.007785z m7.60086 381.831463A110.883142 110.883142 0 0 0 66.479339 403.406282a117.142674 117.142674 0 0 0-44.710944 92.551655 114.460017 114.460017 0 0 0 89.421889 112.22447c134.132833 32.19188 250.381287 163.642056 279.89051 318.789032a116.248455 116.248455 0 0 0 112.22447 93.445873 116.695564 116.695564 0 0 0 89.421888-42.028287 112.671579 112.671579 0 0 0 24.59102-93.445874C571.713009 643.056943 383.927043 436.492381 161.266541 383.733467z" fill="#FFAD08" ></path><path d="M62.008245 997.614731l155.146976-155.146977A109.541813 109.541813 0 0 1 245.323116 913.111046a110.883142 110.883142 0 0 1-110.883141 110.883142 109.541813 109.541813 0 0 1-72.43173-26.379457z m513.728749-513.28164a804.796995 804.796995 0 0 1 191.362841 436.378816 114.460017 114.460017 0 0 0 114.907126 102.835171 118.036893 118.036893 0 0 0 89.421889-38.898521 113.118689 113.118689 0 0 0 28.615004-89.421889A1035.058358 1035.058358 0 0 0 737.143502 320.691036z m-185.997528 444.426785a116.248455 116.248455 0 0 0 112.22447 93.445874 116.695564 116.695564 0 0 0 89.421888-42.028288 112.671579 112.671579 0 0 0 24.591019-93.445873 670.664163 670.664163 0 0 0-143.52213-301.351764l-162.747837 164.983384a439.061472 439.061472 0 0 1 80.03259 178.396667z" fill="#D68650" ></path></symbol><symbol id="icon-github" viewBox="0 0 1024 1024"><path d="M512 0C229.283787 0 0.142041 234.942803 0.142041 524.867683c0 231.829001 146.647305 428.553077 350.068189 497.952484 25.592898 4.819996 34.976961-11.38884 34.976961-25.294314 0-12.45521-0.469203-45.470049-0.725133-89.276559-142.381822 31.735193-172.453477-70.380469-172.453477-70.380469-23.246882-60.569859-56.816233-76.693384-56.816234-76.693385-46.493765-32.58829 3.540351-31.948468 3.540351-31.948467 51.356415 3.71097 78.356923 54.086324 78.356923 54.086324 45.683323 80.19108 119.817417 57.072162 148.993321 43.593236 4.649376-33.91059 17.915029-57.029508 32.50298-70.167195-113.675122-13.222997-233.151301-58.223843-233.1513-259.341366 0-57.285437 19.919806-104.163095 52.678715-140.846248-5.246544-13.265652-22.820334-66.626844 4.990615-138.884127 0 0 42.996069-14.076094 140.760939 53.787741 40.863327-11.644769 84.627183-17.445825 128.177764-17.6591 43.465272 0.213274 87.271782 6.014331 128.135109 17.6591 97.679561-67.906489 140.59032-53.787741 140.59032-53.787741 27.938914 72.257282 10.407779 125.618474 5.118579 138.884127 32.844219 36.683154 52.593405 83.560812 52.593405 140.846248 0 201.586726-119.646798 245.990404-233.663158 258.957473 18.341577 16.208835 34.721032 48.199958 34.721032 97.210357 0 70.167195-0.639822 126.7275-0.639823 143.960051 0 14.033439 9.213443 30.370239 35.190235 25.209005 203.250265-69.527373 349.769606-266.123484 349.769605-497.867175C1023.857959 234.942803 794.673558 0 512 0" fill="#3E75C3" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M586.72 992h-71.04c-8.8 0-16-7.2-16-16V613.76c0-8.8 7.2-16 16-16h71.04c8.8 0 16 7.2 16 16V976c0 8.8-7.2 16-16 16z" fill="#629FF9" ></path><path d="M284.96 152c-118.56 0-214.72 96-214.72 214.24v351.36h429.28V366.24c0.16-118.24-96-214.24-214.56-214.24z" fill="#2166CC" ></path><path d="M520.32 632H204.16c-26.56 0-48-21.44-48-48V388.64c0-26.56 21.44-48 48-48h316.16c26.56 0 48 21.44 48 48V584c0 26.56-21.44 48-48 48z" fill="#D2E4FF" ></path><path d="M568.32 392a51.36 51.36 0 0 0-51.52-51.36H207.68c-28.48 0-51.52 23.04-51.52 51.36v10.72l187.2 98.72c11.84 6.24 25.92 6.24 37.76 0l187.2-98.72v-10.72z" fill="#FFFFFF" ></path><path d="M740 152h-446.4v0.48c114.56 4.48 206.08 98.4 206.08 213.92v351.36h429.28c28.48 0 51.52-23.04 51.52-51.36V392c0-132.48-107.68-240-240.48-240z" fill="#4E8DF6" ></path><path d="M860.32 32H688.48c-9.44 0-17.12 7.68-17.12 17.12v351.36a25.744 25.744 0 1 0 51.52 0V117.76h137.44c9.44 0 17.12-7.68 17.12-17.12V49.12c0-9.44-7.68-17.12-17.12-17.12z" fill="#2166CC" ></path><path d="M912.96 666.24h-36.64c-8.8 0-16-7.2-16-16v-36.64c0-8.8 7.2-16 16-16h36.64c8.8 0 16 7.2 16 16v36.64c0 8.96-7.2 16-16 16z" fill="#FFFFFF" ></path><path d="M70.4 717.76l-25.28 137.12c-10.08 56.8 28 102.88 84.8 102.88h223.2c56.96 0 111.2-46.08 121.28-102.88l24.16-137.12H70.4z" fill="#2974CE" ></path></symbol><symbol id="icon-icon_bilibili-circle" viewBox="0 0 1024 1024"><path d="M767.92894674 350.21337767H263.30043777c-15.32600262 0-28.23249502 11.68799034-28.23249501 27.38858015v334.55432976c0 15.69913199 12.90503329 27.22387831 28.23249501 27.2238796h504.62850897c15.32746044 0 26.83325893-11.5232885 26.83325893-27.2238796V377.60195782c0-15.70204764-11.50871284-27.38858016-26.83325893-27.38858015z m-470.27144319 123.61226676l142.21481359-27.2297083 10.74642064 53.37500984-140.78496964 27.22679394-12.17626459-53.37209548z m219.23399082 162.63490936c-43.70425162 47.64397409-89.55399678-15.0446981-89.5539968-15.04469808l23.28415586-15.04469809s31.1650586 56.24052773 65.91420158-18.27022879c33.31492688 72.36088953 70.21247906 18.98733621 70.21248035 19.34297556l21.13720319 13.61631196c-0.00291565-0.00437217-39.40743199 63.0428537-90.99404418 15.40033744z m210.99599215-109.26135605l-141.14060899-27.22387959 11.10643217-53.37646768 141.85625987 27.2297096-11.82208305 53.37063767z" fill="#1296db" ></path><path d="M512 4.01186763c-280.55403732 0-507.98813237 227.43555287-507.98813237 507.98667455 0 280.55403732 227.43555287 507.98959019 507.98813237 507.98959019S1019.98813237 792.55257951 1019.98813237 512c0-280.55403732-227.43409505-507.98813237-507.98813237-507.98813237z m267.51782442 803.08839008c-35.50997738-1.12376157-47.47344226 0-47.47344225 0s-2.61627903 40.74545108-37.37708205 41.49170983c-35.13684802 0.37312935-40.37086389-28.41031341-41.49462545-39.24856017-21.30482069 0-277.3605723 1.11938809-277.3605723 1.11938812s-4.4848415 37.75312705-39.24856017 37.75312703c-35.13684802 0-37.00832614-31.39972307-39.24856015-37.75312703-22.80462597 0-53.45663249-0.74917438-53.45663252-0.74917439s-77.00314503-16.06643135-87.09513175-116.24733172c1.12084592-100.17944255 0-298.29955145 0-298.29955146s-7.10257834-92.32623328 84.85489775-118.86798421c28.40448341-1.11938809 89.71286861-1.49543311 160.73427994-1.49543311l-65.41718173-63.54716142s-10.09198674-12.70972358 7.10257836-26.91342375c17.57206793-14.20224234 18.31395447-8.41436177 24.29714472-4.30264964 5.98173243 4.11025431 97.56462134 94.37698762 97.56462135 94.37698762h-12.3351377c35.13539021 0 71.39599978 0.56989689 106.15826063 0.56989688 13.45452579-13.45744015 90.08599799-88.49728221 95.31855605-92.23149281 5.9802746-3.73858277 7.09966398-10.04534541 24.29860253 4.15689565 17.1945651 14.20369888 7.10112053 26.93820159 7.10112053 26.9382016l-63.92174862 61.68880241c87.84430615 0.74917438 155.50172317 1.1252181 155.5017219 1.12521811s86.71908676 19.06895886 88.96369551 118.49631268c-1.12084592 99.43318382 0.37312935 299.42039738 0.37312939 299.42039735s-4.8535987 97.18857634-87.83993397 112.51895243z" fill="#1296db" ></path></symbol><symbol id="icon-zhifeiji1" viewBox="0 0 1167 1024"><path d="M98.21248349 469.394958L1038.17046641 88.47058818c9.07562988-3.6554625 19.28571416 0.75630234 22.94117666 9.70588213 1.2605045 3.27731133 1.63865566 6.80672286 0.88235243 10.21008428L896.11164248 922.29411729c-1.89075674 9.57983203-11.21848769 15.75630263-20.79831885 13.73949579-2.39495801-0.50420127-4.66386592-1.51260469-6.68067275-2.89915927L619.93517187 756.15966406l-143.31932753 117.73109268c-14.49579815 11.97479004-35.92437011 9.8319331-47.89915928-4.66386592-2.64705908-3.27731133-4.66386592-6.93277295-6.05042051-10.96638662l-90.50420127-275.16806719-233.06722734-80.67226904c-9.20168086-3.15126035-14.11764697-13.23529453-10.84033565-22.43697451 1.63865566-4.78991602 5.29411729-8.69747871 9.9579832-10.58823546z" fill="#FCFDFC" ></path><path d="M878.84273516 961.62184883c-2.77310918 0-5.67226934-0.25210107-8.57142862-0.88235333-5.92436953-1.2605045-11.34453779-3.52941152-16.26050391-7.05882303L620.94357529 787.92436953l-128.44537822 105.50420156c-12.22689112 10.0840333-27.6050417 14.74789922-43.36134434 13.23529453-15.75630263-1.51260469-29.99999971-9.07562988-39.95798291-21.30252099-4.66386592-5.67226934-8.19327744-12.10084013-10.46218534-19.15966406l-86.59663859-263.31932725-221.2184874-76.63865625c-10.84033653-3.7815126-19.53781523-11.47058789-24.57983144-21.80672227s-5.67226934-21.93277325-1.89075674-32.77310888c4.03361367-11.72268896 12.98319346-21.05041992 24.45378222-25.71428584L1028.71668447 65.15126036c21.93277325-8.82352969 46.89075674 1.76470576 55.84033652 23.5714289 3.15126035 7.81512627 3.9075627 16.38655489 2.26890792 24.70588242L920.8175249 927.33613438c-4.15966377 20.29411758-22.05882334 34.28571445-41.97478974 34.28571445z m-258.90756329-205.46218477l248.69747901 176.97478975c2.01680684 1.38655459 4.28571387 2.39495801 6.68067276 2.89915928 9.57983203 1.89075674 18.90756299-4.28571387 20.79831884-13.7394958L1062.12004648 108.38655459c0.75630234-3.40336143 0.37815117-6.93277295-0.88235332-10.21008428-3.6554625-9.07562988-13.99159687-13.36134463-22.94117665-9.70588213L98.21248349 469.394958c-4.66386592 1.89075674-8.31932754 5.79831943-10.08403417 10.58823546-1.51260469 4.41176484-1.2605045 9.20168086 0.75630322 13.48739472 2.01680684 4.28571387 5.67226934 7.4369751 10.0840333 8.94957979l233.06722647 80.67226904L422.54021445 858.2605042c1.2605045 4.03361367 3.40336143 7.68907529 6.05041963 10.96638662 5.79831943 7.05882393 13.99159687 11.34453779 22.94117667 12.22689111 9.07562988 0.88235332 17.89915957-1.76470576 24.95798349-7.56302519l143.44537763-117.73109268z" fill="#0077ff" ></path><path d="M331.90996221 582.96638692l92.89915927 277.81512538c5.54621836 16.51260498 23.31932783 25.46218477 39.83193282 19.91596642 3.6554625-1.2605045 6.93277295-3.02521026 9.8319331-5.42016739l144.8319331-117.73109268-145.33613437-104.49579814c261.05042021-253.10924385 393.27731104-381.42857109 396.55462148-384.8319334 0.50420127-0.50420127 2.26890791-3.02521026 0.37815118-6.1764706-1.13445352-1.38655459-2.89915927-2.89915927-6.17647061-1.89075586-177.73109209 105.75630263-355.33613408 213.40336113-532.81512597 322.81512626z" fill="#0077ff" ></path><path d="M454.68307109 883.59663887c-5.04201709 0-9.9579832-1.13445352-14.62184823-3.40336143-7.81512627-3.9075627-13.7394958-10.58823545-16.51260499-18.90756299L330.39735752 582.58823487l0.88235244-0.50420128C507.87634854 473.0504205 687.24609628 364.39495771 864.09483594 259.01680713l0.25210107-0.12605098c3.15126035-1.00840342 5.54621836-0.25210107 7.5630252 2.26890791l0.12605009 0.1260501c2.14285693 3.52941152 0.50420127 6.55462177-0.50420126 7.68907617-3.40336143 3.52941152-136.38655459 132.60504199-395.54621895 383.8235291l145.46218535 104.62184825-146.09243671 118.73949609c-3.02521026 2.5210081-6.55462177 4.41176484-10.33613526 5.67226933-3.27731133 1.13445352-6.80672286 1.76470576-10.33613438 1.76470576z m-121.26050419-300.00000059l92.52100898 276.80672286c2.5210081 7.68907529 7.94117637 13.86554589 15.12605039 17.52100839 7.18487402 3.6554625 15.37815146 4.15966377 23.06722676 1.63865567 3.40336143-1.13445352 6.68067187-2.89915927 9.45378105-5.16806719l143.57142861-116.72268926L471.9519793 653.1764706l1.13445351-1.00840341C732.87634854 400.31932783 866.23769287 270.86554619 869.5150042 267.33613467c0 0 1.76470576-2.01680684 0.25210107-4.66386592-0.88235332-1.13445352-2.14285693-2.14285693-4.66386592-1.38655459-176.47058847 105.12605039-355.33613408 213.52941211-531.68067245 322.31092412z" fill="#CAE0EE" ></path><path d="M467.03601231 874.89915927l6.55462177-222.85714218 145.84033652 105.37815059-148.23529453 119.49579844c-1.13445352 0.88235332-2.64705908 0.75630234-3.52941152-0.37815118-0.37815117-0.37815117-0.63025224-1.00840342-0.63025224-1.63865566z" fill="#94C3E2" ></path><path d="M469.55702128 878.80672285c-1.13445352 0-2.14285693-0.50420127-2.89916015-1.38655459-0.50420127-0.75630234-0.88235332-1.63865566-0.88235244-2.52100899l6.68067188-225.25210019 148.99159687 107.7731086-1.26050449 1.00840341-148.23529365 119.49579844c-0.75630234 0.63025224-1.51260469 0.88235332-2.39495802 0.88235333z m5.29411729-224.36974775l-6.55462177 220.46218417c0 0.25210107 0.1260501 0.63025224 0.25210107 0.88235333 0.37815117 0.50420127 1.2605045 0.63025224 1.76470576 0.25210107l146.97479004-118.48739502-142.4369751-103.10924355z" fill="#94C3E2" ></path></symbol><symbol id="icon-cloud" viewBox="0 0 1024 1024"><path d="M811.4 418.7C765.6 297.9 648.9 212 512.2 212S258.8 297.8 213 418.6C127.3 441.1 64 519.1 64 612c0 110.5 89.5 200 199.9 200h496.2C870.5 812 960 722.5 960 612c0-92.7-63.1-170.7-148.6-193.3z m36.3 281c-23.4 23.4-54.5 36.3-87.6 36.3H263.9c-33.1 0-64.2-12.9-87.6-36.3-23.4-23.4-36.3-54.6-36.3-87.7 0-28 9.1-54.3 26.2-76.3 16.7-21.3 40.2-36.8 66.1-43.7l37.9-9.9 13.9-36.6c8.6-22.8 20.6-44.1 35.7-63.4 14.9-19.2 32.6-35.9 52.4-49.9 41.1-28.9 89.5-44.2 140-44.2s98.9 15.3 140 44.2c19.9 14 37.5 30.8 52.4 49.9 15.1 19.3 27.1 40.7 35.7 63.4l13.8 36.5 37.8 10c54.3 14.5 92.1 63.8 92.1 120 0 33.1-12.9 64.3-36.3 87.7z"  ></path></symbol><symbol id="icon-edit" viewBox="0 0 1024 1024"><path d="M257.7 752c2 0 4-0.2 6-0.5L431.9 722c2-0.4 3.9-1.3 5.3-2.8l423.9-423.9c3.9-3.9 3.9-10.2 0-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2c-1.9 11.1 1.5 21.9 9.4 29.8 6.6 6.4 14.9 9.9 23.8 9.9z m67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z"  ></path></symbol><symbol id="icon-link" viewBox="0 0 1024 1024"><path d="M574 665.4c-3.1-3.1-8.2-3.1-11.3 0L446.5 781.6c-53.8 53.8-144.6 59.5-204 0-59.5-59.5-53.8-150.2 0-204l116.2-116.2c3.1-3.1 3.1-8.2 0-11.3l-39.8-39.8c-3.1-3.1-8.2-3.1-11.3 0L191.4 526.5c-84.6 84.6-84.6 221.5 0 306s221.5 84.6 306 0l116.2-116.2c3.1-3.1 3.1-8.2 0-11.3L574 665.4zM832.6 191.4c-84.6-84.6-221.5-84.6-306 0L410.3 307.6c-3.1 3.1-3.1 8.2 0 11.3l39.7 39.7c3.1 3.1 8.2 3.1 11.3 0l116.2-116.2c53.8-53.8 144.6-59.5 204 0 59.5 59.5 53.8 150.2 0 204L665.3 562.6c-3.1 3.1-3.1 8.2 0 11.3l39.8 39.8c3.1 3.1 8.2 3.1 11.3 0l116.2-116.2c84.5-84.6 84.5-221.5 0-306.1z"  ></path><path d="M610.1 372.3c-3.1-3.1-8.2-3.1-11.3 0L372.3 598.7c-3.1 3.1-3.1 8.2 0 11.3l39.6 39.6c3.1 3.1 8.2 3.1 11.3 0l226.4-226.4c3.1-3.1 3.1-8.2 0-11.3l-39.5-39.6z"  ></path></symbol><symbol id="icon-tag" viewBox="0 0 1024 1024"><path d="M938 458.8l-29.6-312.6c-1.5-16.2-14.4-29-30.6-30.6L565.2 86h-0.4c-3.2 0-5.7 1-7.6 2.9L88.9 557.2c-3.9 3.9-3.9 10.2 0 14.1l363.8 363.8c1.9 1.9 4.4 2.9 7.1 2.9s5.2-1 7.1-2.9l468.3-468.3c2-2.1 3-5 2.8-8zM459.7 834.7L189.3 564.3 589 164.6 836 188l23.4 247-399.7 399.7z"  ></path><path d="M680 256c-48.5 0-88 39.5-88 88s39.5 88 88 88 88-39.5 88-88-39.5-88-88-88z m0 120c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"  ></path></symbol><symbol id="icon-indent" viewBox="0 0 1024 1024"><path d="M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zM400 646c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zM904 160H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM904 792H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM142.4 642.1L298.7 519c4.5-3.5 4.5-10.3 0-13.9L142.4 381.9c-5.8-4.6-14.4-0.5-14.4 6.9v246.3c0 7.4 8.5 11.6 14.4 7z"  ></path></symbol><symbol id="icon-align-right" viewBox="0 0 1024 1024"><path d="M904 158H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM904 582H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM904 794H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM904 370H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z"  ></path></symbol><symbol id="icon-desktop" viewBox="0 0 1024 1024"><path d="M928 140H96c-17.7 0-32 14.3-32 32v496c0 17.7 14.3 32 32 32h380v112H304c-8.8 0-16 7.2-16 16v48c0 4.4 3.6 8 8 8h432c4.4 0 8-3.6 8-8v-48c0-8.8-7.2-16-16-16H548V700h380c17.7 0 32-14.3 32-32V172c0-17.7-14.3-32-32-32z m-40 488H136V212h752v416z"  ></path></symbol><symbol id="icon-detail-fill" viewBox="0 0 1024 1024"><path d="M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zM380 696c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40z m0-144c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40z m0-144c-22.1 0-40-17.9-40-40s17.9-40 40-40 40 17.9 40 40-17.9 40-40 40z m304 272c0 4.4-3.6 8-8 8H492c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48z m0-144c0 4.4-3.6 8-8 8H492c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48z m0-144c0 4.4-3.6 8-8 8H492c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48z"  ></path></symbol><symbol id="icon-sever-fill" viewBox="0 0 1024 1024"><path d="M832 64H192c-17.7 0-32 14.3-32 32v224h704V96c0-17.7-14.3-32-32-32zM456 216c0 4.4-3.6 8-8 8H264c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48zM160 928c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V704H160v224z m576-136c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40zM160 640h704V384H160v256z m96-152c0-4.4 3.6-8 8-8h184c4.4 0 8 3.6 8 8v48c0 4.4-3.6 8-8 8H264c-4.4 0-8-3.6-8-8v-48z"  ></path></symbol><symbol id="icon-image-fill" viewBox="0 0 1024 1024"><path d="M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zM338 304c35.3 0 64 28.7 64 64s-28.7 64-64 64-64-28.7-64-64 28.7-64 64-64z m513.9 437.1c-1.4 1.2-3.3 1.9-5.2 1.9H177.2c-4.4 0-8-3.6-8-8 0-1.9 0.7-3.7 1.9-5.2l170.3-202c2.8-3.4 7.9-3.8 11.3-1 0.3 0.3 0.7 0.6 1 1l99.4 118 158.1-187.5c2.8-3.4 7.9-3.8 11.3-1 0.3 0.3 0.7 0.6 1 1l229.6 271.6c2.6 3.3 2.2 8.4-1.2 11.2z"  ></path></symbol><symbol id="icon-idcard-fill" viewBox="0 0 1024 1024"><path d="M373 411c-28.5 0-51.7 23.3-51.7 52s23.2 52 51.7 52 51.7-23.3 51.7-52-23.2-52-51.7-52z"  ></path><path d="M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zM608 420c0-4.4 1-8 2.3-8h123.4c1.3 0 2.3 3.6 2.3 8v48c0 4.4-1 8-2.3 8H610.3c-1.3 0-2.3-3.6-2.3-8v-48z m-86 253h-43.9c-4.2 0-7.6-3.3-7.9-7.5-3.8-50.5-46-90.5-97.2-90.5s-93.4 40-97.2 90.5c-0.3 4.2-3.7 7.5-7.9 7.5H224c-4.6 0-8.2-3.8-8-8.4 2.8-53.3 32-99.7 74.6-126.1-18.1-19.9-29.1-46.4-29.1-75.5 0-61.9 49.9-112 111.4-112s111.4 50.1 111.4 112c0 29.1-11 55.5-29.1 75.5 42.7 26.5 71.8 72.8 74.6 126.1 0.4 4.6-3.2 8.4-7.8 8.4z m278.9-53H615.1c-3.9 0-7.1-3.6-7.1-8v-48c0-4.4 3.2-8 7.1-8h185.7c3.9 0 7.1 3.6 7.1 8v48h0.1c0 4.4-3.2 8-7.1 8z"  ></path></symbol><symbol id="icon-cloud-fill" viewBox="0 0 1024 1024"><path d="M811.4 418.7C765.6 297.9 648.9 212 512.2 212S258.8 297.8 213 418.6C127.3 441.1 64 519.1 64 612c0 110.5 89.5 200 199.9 200h496.2C870.5 812 960 722.5 960 612c0-92.7-63.1-170.7-148.6-193.3z"  ></path></symbol><symbol id="icon-customerservice-fill" viewBox="0 0 1024 1024"><path d="M512 128c-212.1 0-384 171.9-384 384v360c0 13.3 10.7 24 24 24h184c35.3 0 64-28.7 64-64V624c0-35.3-28.7-64-64-64H200v-48c0-172.3 139.7-312 312-312s312 139.7 312 312v48H688c-35.3 0-64 28.7-64 64v208c0 35.3 28.7 64 64 64h184c13.3 0 24-10.7 24-24V512c0-212.1-171.9-384-384-384z"  ></path></symbol><symbol id="icon-github-fill" viewBox="0 0 1024 1024"><path d="M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9 23.5 23.2 38.1 55.4 38.1 91v112.5c0.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z"  ></path></symbol><symbol id="icon-medium-circle-fill" viewBox="0 0 1024 1024"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64z m256 253.7l-40.8 39.1c-3.6 2.7-5.3 7.1-4.6 11.4v287.7c-0.7 4.4 1 8.8 4.6 11.4l40 39.1v8.7H566.4v-8.3l41.3-40.1c4.1-4.1 4.1-5.3 4.1-11.4V422.5l-115 291.6h-15.5L347.5 422.5V618c-1.2 8.2 1.7 16.5 7.5 22.4l53.8 65.1v8.7H256v-8.7l53.8-65.1c5.8-5.9 8.3-14.3 7-22.4V392c0.7-6.3-1.7-12.4-6.5-16.7l-47.8-57.6V309H411l114.6 251.5 100.9-251.3H768v8.5z"  ></path></symbol><symbol id="icon-Console-SQL" viewBox="0 0 1024 1024"><path d="M301.3 496.7c-23.8 0-40.2-10.5-41.6-26.9H205c0.9 43.4 36.9 70.3 93.9 70.3 59.1 0 95-28.4 95-75.5 0-35.8-20-55.9-64.5-64.5l-29.1-5.6c-23.8-4.7-33.8-11.9-33.8-24.2 0-15 13.3-24.5 33.4-24.5 20.1 0 35.3 11.1 36.6 27h53c-0.9-41.7-37.5-70.3-90.3-70.3-54.4 0-89.7 28.9-89.7 73 0 35.5 21.2 58 62.5 65.8l29.7 5.9c25.8 5.2 35.6 11.9 35.6 24.4 0.1 14.7-14.5 25.1-36 25.1z"  ></path><path d="M928 140H96c-17.7 0-32 14.3-32 32v496c0 17.7 14.3 32 32 32h380v112H304c-8.8 0-16 7.2-16 16v48c0 4.4 3.6 8 8 8h432c4.4 0 8-3.6 8-8v-48c0-8.8-7.2-16-16-16H548V700h380c17.7 0 32-14.3 32-32V172c0-17.7-14.3-32-32-32z m-40 488H136V212h752v416z"  ></path><path d="M828.5 486.7h-95.8V308.5h-57.4V534h153.2zM529.9 540.1c14.1 0 27.2-2 39.1-5.8l13.3 20.3h53.3L607.9 511c21.1-20 33-51.1 33-89.8 0-73.3-43.3-118.8-110.9-118.8s-111.2 45.3-111.2 118.8c-0.1 73.7 43 118.9 111.1 118.9z m0-190c31.6 0 52.7 27.7 52.7 71.1 0 16.7-3.6 30.6-10 40.5l-5.2-6.9h-48.8L542 491c-3.9 0.9-8 1.4-12.2 1.4-31.7 0-52.8-27.5-52.8-71.2 0.1-43.6 21.2-71.1 52.9-71.1z"  ></path></symbol><symbol id="icon-send" viewBox="0 0 1024 1024"><path d="M931.4 498.9L94.9 79.5c-3.4-1.7-7.3-2.1-11-1.2-8.5 2.1-13.8 10.7-11.7 19.3l86.2 352.2c1.3 5.3 5.2 9.6 10.4 11.3l147.7 50.7-147.6 50.7c-5.2 1.8-9.1 6-10.3 11.3L72.2 926.5c-0.9 3.7-0.5 7.6 1.2 10.9 3.9 7.9 13.5 11.1 21.5 7.2l836.5-417c3.1-1.5 5.6-4.1 7.2-7.1 3.9-8 0.7-17.6-7.2-21.6zM170.8 826.3l50.3-205.6 295.2-101.3c2.3-0.8 4.2-2.6 5-5 1.4-4.2-0.8-8.7-5-10.2L221.1 403 171 198.2l628 314.9-628.2 313.2z"  ></path></symbol><symbol id="icon-time-circle" viewBox="0 0 1024 1024"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64z m0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"  ></path><path d="M686.7 638.6L544.1 535.5V288c0-4.4-3.6-8-8-8H488c-4.4 0-8 3.6-8 8v275.4c0 2.6 1.2 5 3.3 6.5l165.4 120.6c3.6 2.6 8.6 1.8 11.2-1.7l28.6-39c2.6-3.7 1.8-8.7-1.8-11.2z"  ></path></symbol><symbol id="icon-edit-square" viewBox="0 0 1024 1024"><path d="M904 512h-56c-4.4 0-8 3.6-8 8v320H184V184h320c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V520c0-4.4-3.6-8-8-8z"  ></path><path d="M355.9 534.9L354 653.8c-0.1 8.9 7.1 16.2 16 16.2h0.4l118-2.9c2-0.1 4-0.9 5.4-2.3l415.9-415c3.1-3.1 3.1-8.2 0-11.3L785.4 114.3c-1.6-1.6-3.6-2.3-5.7-2.3s-4.1 0.8-5.7 2.3l-415.8 415c-1.4 1.5-2.3 3.5-2.3 5.6z m63.5 23.6L779.7 199l45.2 45.1-360.5 359.7-45.7 1.1 0.7-46.4z"  ></path></symbol><symbol id="icon-experiment" viewBox="0 0 1024 1024"><path d="M552 472m-40 0a40 40 0 1 0 80 0 40 40 0 1 0-80 0Z"  ></path><path d="M879 824.9L696.3 352V178H768v-68H256v68h71.7v174L145 824.9c-2.8 7.4-4.3 15.2-4.3 23.1 0 35.3 28.7 64 64 64h614.6c7.9 0 15.7-1.5 23.1-4.3 33-12.7 49.4-49.8 36.6-82.8zM395.7 364.7V180h232.6v184.7L719.2 600c-20.7-5.3-42.1-8-63.9-8-61.2 0-119.2 21.5-165.3 60-33.9 28.2-76.3 43.9-121.3 43.9-32.7 0-64.1-8.3-91.8-23.7l118.8-307.5zM210.5 844l41.7-107.8c35.7 18.1 75.4 27.8 116.6 27.8 61.2 0 119.2-21.5 165.3-60 33.9-28.2 76.3-43.9 121.3-43.9 35 0 68.4 9.5 97.6 27.1L813.5 844h-603z"  ></path></symbol><symbol id="icon-trophy" viewBox="0 0 1024 1024"><path d="M868 160h-92v-40c0-4.4-3.6-8-8-8H256c-4.4 0-8 3.6-8 8v40h-92c-24.3 0-44 19.7-44 44v148c0 81.7 60 149.6 138.2 162C265.7 630.2 359 721.7 476 734.5v105.2H280c-17.7 0-32 14.3-32 32V904c0 4.4 3.6 8 8 8h512c4.4 0 8-3.6 8-8v-32.3c0-17.7-14.3-32-32-32H548V734.5C665 721.7 758.3 630.2 773.8 514 852 501.6 912 433.7 912 352V204c0-24.3-19.7-44-44-44zM184 352V232h64v207.6c-37.1-11.8-64-46.6-64-87.6z m520 128c0 49.1-19.1 95.4-53.9 130.1-34.8 34.8-81 53.9-130.1 53.9h-16c-49.1 0-95.4-19.1-130.1-53.9-34.8-34.8-53.9-81-53.9-130.1V184h384v296z m136-128c0 41-26.9 75.8-64 87.6V232h64v120z"  ></path></symbol><symbol id="icon-home" viewBox="0 0 1024 1024"><path d="M946.5 505L560.1 118.8l-25.9-25.9c-12.3-12.2-32.1-12.2-44.4 0L77.5 505c-12.3 12.3-18.9 28.6-18.8 46 0.4 35.2 29.7 63.3 64.9 63.3h42.5V940h691.8V614.3h43.4c17.1 0 33.2-6.7 45.3-18.8 12.1-12.1 18.7-28.2 18.7-45.3 0-17-6.7-33.1-18.8-45.2zM568 868H456V664h112v204z m217.9-325.7V868H632V640c0-22.1-17.9-40-40-40H432c-22.1 0-40 17.9-40 40v228H238.1V542.3h-96l370-369.7 23.1 23.1L882 542.3h-96.1z"  ></path></symbol><symbol id="icon-flag" viewBox="0 0 1024 1024"><path d="M880 305H624V192c0-17.7-14.3-32-32-32H184v-40c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v784c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V640h248v113c0 17.7 14.3 32 32 32h416c17.7 0 32-14.3 32-32V337c0-17.7-14.3-32-32-32zM184 568V232h368v336H184z m656 145H504v-73h112c4.4 0 8-3.6 8-8V377h216v336z"  ></path></symbol><symbol id="icon-rocket" viewBox="0 0 1024 1024"><path d="M864 736c0-111.6-65.4-208-160-252.9V317.3c0-15.1-5.3-29.7-15.1-41.2L536.5 95.4C530.1 87.8 521 84 512 84s-18.1 3.8-24.5 11.4L335.1 276.1c-9.7 11.5-15.1 26.1-15.1 41.2v165.8C225.4 528 160 624.4 160 736h156.5c-2.3 7.2-3.5 15-3.5 23.8 0 22.1 7.6 43.7 21.4 60.8 11.3 14 26.2 24.6 43.1 30.6 23.1 54 75.6 88.8 134.5 88.8 29.1 0 57.3-8.6 81.4-24.8 23.6-15.8 41.9-37.9 53-64 16.9-6 31.8-16.5 43.1-30.5 13.8-17.2 21.4-38.8 21.4-60.8 0-8.4-1.1-16.4-3.1-23.8H864zM762.3 621.4c9.4 14.6 17 30.3 22.5 46.6H700V558.7c24.8 16.2 46.1 37.5 62.3 62.7zM388 483.1V318.8l124-147 124 147V668H388V483.1zM239.2 668c5.5-16.3 13.1-32 22.5-46.6 16.3-25.2 37.5-46.5 62.3-62.7V668h-84.8z m388.9 116.2c-5.2 3-11.2 4.2-17.1 3.4l-19.5-2.4-2.8 19.4c-5.4 37.9-38.4 66.5-76.7 66.5-38.3 0-71.3-28.6-76.7-66.5l-2.8-19.5-19.5 2.5c-1 0.1-2.1 0.2-3.3 0.2-4.9 0-9.6-1.3-13.8-3.7-8.7-5-14.1-14.3-14.1-24.4 0-10.6 5.9-19.4 14.6-23.8h231.3c8.8 4.5 14.6 13.3 14.6 23.8-0.1 10.2-5.5 19.6-14.2 24.5z"  ></path><path d="M512 400m-48 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0Z"  ></path></symbol><symbol id="icon-calendar" viewBox="0 0 1024 1024"><path d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32z m-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"  ></path></symbol></svg>',(h=>{var c=(l=(l=document.getElementsByTagName("script"))[l.length-1]).getAttribute("data-injectcss"),l=l.getAttribute("data-disable-injectsvg");if(!l){var t,i,o,a,v,e=function(c,l){l.parentNode.insertBefore(c,l)};if(c&&!h.__iconfont__svg__cssinject__){h.__iconfont__svg__cssinject__=!0;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>")}catch(c){console&&console.log(c)}}t=function(){var c,l=document.createElement("div");l.innerHTML=h._iconfont_svg_string_4902343,(l=l.getElementsByTagName("svg")[0])&&(l.setAttribute("aria-hidden","true"),l.style.position="absolute",l.style.width=0,l.style.height=0,l.style.overflow="hidden",l=l,(c=document.body).firstChild?e(l,c.firstChild):c.appendChild(l))},document.addEventListener?~["complete","loaded","interactive"].indexOf(document.readyState)?setTimeout(t,0):(i=function(){document.removeEventListener("DOMContentLoaded",i,!1),t()},document.addEventListener("DOMContentLoaded",i,!1)):document.attachEvent&&(o=t,a=h.document,v=!1,d(),a.onreadystatechange=function(){"complete"==a.readyState&&(a.onreadystatechange=null,s())})}function s(){v||(v=!0,o())}function d(){try{a.documentElement.doScroll("left")}catch(c){return void setTimeout(d,50)}s()}})(window);]]></content>
      
    </entry>
    
    
  
</search>
